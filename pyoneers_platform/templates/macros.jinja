{# ===================== Discord Animated SVG Macro ===================== #}
{#
    Macro for rendering the Discord icon as a svg.
    Includes CSS for the smooth rotating animation
    :param size: The size (width/height) of the svg.
#}
{% macro discord_animated_svg(size=50) %}
    <svg
            color="currentColor"
            fill="#7288D900"
            width="{{ size }}"
            height="{{ size }}"
            viewBox="0 0 48 48"
            class="previewbox">
        <rect width="100%" height="100%" fill="currentfill"></rect>
        <defs>
            <g>
                <defs>
                    <path
                            id="discord-def-face"
                            fill="currentcolor"
                            d="M40,12C40,12,35.415,8.412,30,8L29.512,8.976C34.408,10.174,36.654,11.891,39,14C34.955,11.935,30.961,10,24,10S13.045,11.935,9,14C11.346,11.891,14.018,9.985,18.488,8.976L18,8C12.319,8.537,8,12,8,12S2.879,19.425,2,34C7.162,39.953,15,40,15,40L16.639,37.815C13.857,36.848,10.715,35.121,8,32C11.238,34.45,16.125,37,24,37S36.762,34.45,40,32C37.285,35.121,34.143,36.848,31.361,37.815L33,40C33,40,40.838,39.953,46,34C45.121,19.425,40,12,40,12Z"
                    ></path>
                    <g id="discord-def-face-eyes">
                        <path
                                id="discord-def-face-left-eye"
                                fill="#4752C5"
                                d="M17.5,30C15.567,30,14,28.209,14,26C14,23.791,15.567,22,17.5,22S21,23.791,21,26C21,28.209,19.433,30,17.5,30Z"
                        ></path>
                        <path
                                id="discord-def-face-right-eye"
                                fill="#4752C5"
                                d="M30.5,30C28.567,30,27,28.209,27,26C27,23.791,28.567,22,30.5,22S34,23.791,34,26C34,28.209,32.433,30,30.5,30Z"
                        ></path>
                    </g>
                </defs>
                <g id="discordFaceID40">
                    <use href="#discord-def-face"></use>
                    <g id="discord-logo-eyes">
                        <mask id="mask-right-eye-wink">
                            <ellipse fill="#FFFFFF" ry="15" rx="15" cy="39.7" cx="35"></ellipse>
                            <ellipse fill="#000000" ry="15" rx="15" cy="40.5" cx="34"></ellipse>
                        </mask>
                        <mask id="mask-eyes-angry">
                            <rect height="48" width="48" y="0" x="0" fill="#FFFFFF"></rect>
                            <rect
                                    transform="rotate(45 24,14.5)"
                                    height="24"
                                    width="24"
                                    y="2.5"
                                    x="12"
                                    fill="#000000"
                            ></rect>
                        </mask>
                        <g class="discord-eyes">
                            <use xlink:href="#discord-def-face-eyes" mask="url(#mask-eyes-angry)"></use>
                        </g>
                    </g>
                </g>
                <mask id="mask-outer-layer">
                    <rect width="100%" height="100%" fill="#FFFFFF"></rect>
                    <circle r="42%" cx="50%" cy="50%" fill="#000000"></circle>
                </mask>
                <mask id="mask-middle-layer">
                    <rect width="100%" height="100%" fill="#000000"></rect>
                    <circle r="43%" cx="50%" cy="50%" fill="#FFFFFF"></circle>
                    <circle r="32%" cx="50%" cy="50%" fill="#000000"></circle>
                </mask>
                <mask id="mask-inner-layer">
                    <rect width="100%" height="100%" fill="#000000"></rect>
                    <circle r="32%" cx="50%" cy="50%" fill="#FFFFFF"></circle>
                </mask>
            </g>
        </defs>
        <g class="discord-logo swirl-animation">
            <use class="discord-original" xlink:href="#discordFaceID40"></use>
            <use
                    class="discord-inner-layer"
                    xlink:href="#discordFaceID40"
                    mask="url(#mask-inner-layer)"
            ></use>
            <use
                    class="discord-middle-layer"
                    xlink:href="#discordFaceID40"
                    mask="url(#mask-middle-layer)"
            ></use>
            <use
                    class="discord-outer-layer"
                    xlink:href="#discordFaceID40"
                    mask="url(#mask-outer-layer)"
            ></use>
        </g>
        <!----> <!---->
    </svg>
    <style>
        .discord-logo {
            transform: scale(0.7);
            transform-origin: 24px 24px;
        }
        .discord-logo.swirl-animation .discord-outer-layer {
            transition: transform 800ms cubic-bezier(0.7, 1, 0.7, 1);
            transform-origin: 50% 50%;
        }
        .discord-logo-container:hover .swirl-animation .discord-outer-layer,
        .animated .swirl-animation .discord-outer-layer {
            transform: scale(1.1) rotate(360deg);
        }
        .discord-logo.swirl-animation .discord-middle-layer {
            transition: transform 800ms cubic-bezier(0.5, 1, 0.5, 1);
            transform-origin: 50% 50%;
        }
        .discord-logo-container:hover .swirl-animation .discord-middle-layer,
        .animated .swirl-animation .discord-middle-layer {
            transform: scale(1.1) rotate(360deg);
        }
        .discord-logo.swirl-animation .discord-inner-layer {
            transition: transform 800ms cubic-bezier(0.3, 1, 0.3, 1);
            transform-origin: 50% 50%;
        }
        .discord-logo-container:hover .swirl-animation .discord-inner-layer,
        .animated .swirl-animation .discord-inner-layer {
            transform: scale(1.15) rotate(360deg);
        }
        .discord-logo.swirl-animation .discord-original {
            transition: visibility 0ms;
            transition-delay: 800ms;
        }
        .discord-logo-container:hover .swirl-animation .discord-original,
        .animated .swirl-animation .discord-original {
            visibility: hidden;
            transition-delay: 0ms;
        }
    </style>
{% endmacro %}


{# ===================== Field Rendering Macros ===================== #}
{#
    Macro for rendering form fields with additional attributes.
    This is the equivalent of django-widget-tweaks' `render_field` tag but as a jinja macro.
    :param field: The form field to render
    :param class: The CSS class to add
    :param placeholder: The placeholder text
    :param type: The input type (e.g., 'text', 'password')
    :param required: Whether the field is required
    :param error_class: The CSS class to add if the field has errors
    :param required_class: The CSS class to add if the field is required
#}
{% macro render_field(field, class=None, placeholder=None, type=None, required=False, error_class=None, required_class=None) %}
    {% if field is defined and field.field.widget is defined %}
        {# Get the field's attributes #}
        {% set field_attrs = field.field.widget.attrs %}

        {# Handle the default class attribute #}
        {% if class %}
            {% set _ = field_attrs.update({"class": class}) %}
        {% endif %}

        {# Append the error_class if the field has errors #}
        {% if field.errors and error_class %}
            {% set _ = field_attrs.update({"class": field_attrs.class ~ ' ' ~ error_class}) %}
        {% endif %}

        {# Append the required_class if the field is required #}
        {% if field.field.required and required_class %}
            {% set _ = field_attrs.update({"class": field_attrs.class ~ ' ' ~ required_class}) %}
        {% endif %}

        {# Handle other attributes #}
        {% if placeholder %}
            {% set _ = field_attrs.update({"placeholder": placeholder}) %}
        {% endif %}
        {% if type %}
            {% set _ = field_attrs.update({"type": type}) %}
        {% endif %}
        {% if required %}
            {% set _ = field_attrs.update({"required": "required"}) %}
        {% endif %}

        {{ field }}
    {% else %}
        <!-- Log an error or render the field as is -->
        {{ field }}
    {% endif %}
{% endmacro %}

{# ===================== Form Error Rendering Macro ===================== #}
{#
    Macro for rendering form errors.
    :param form: The Django form instance
#}
{% macro render_form_errors(form) %}
    {% if form.errors %}
        <div class="flex mb-3">
            <div class="text-error">
                <ul role="list" class="list-disc pl-5 space-y-1">
                    {% for field in form %}
                        {% if field.errors %}
                            {% for error in field.errors %}
                                <li>{{ error }}</li>
                            {% endfor %}
                        {% endif %}
                    {% endfor %}
                    {% if form.non_field_errors() %}
                        {% for error in form.non_field_errors() %}
                            <li>{{ error }}</li>
                        {% endfor %}
                    {% endif %}
                </ul>
            </div>
        </div>
    {% endif %}
{% endmacro %}


{#
    ===================== Chat Message Macro =====================
    Renders a chat message in a conversation UI.
    :param message: The chat message content as a string.
    :param img_src: URL for the avatar's image source.
    :param side: Determines the position of the chat bubble ('start' or 'end').
    :param id: Optional unique identifier for the chat element.
    :param style: Optional inline CSS styles for the chat element.
#}
{% macro chat_message(message, img_src, side='start', id=None, style=None) -%}
<div class="chat chat-{{ side }}" {% if id %}id="{{ id }}"{% endif %} {% if style %}style="{{ style }}"{% endif %}>
  <div class="chat-image avatar">
    <div class="w-10 rounded-full">
      <img src="{{ img_src }}" alt="{{ side|capitalize }} Avatar" />
    </div>
  </div>
  <div class="chat-bubble{% if side == 'start' %} bg-base-100/60{% endif %}">
    {{ message }}
  </div>
</div>
{%- endmacro %}

{#
    ===================== Chat Loading Macro =====================
    Renders a loading indicator within a chat conversation UI.
    :param img_src: URL for the avatar's image source.
    :param side: Determines the position of the chat bubble ('start' or 'end').
    :param id: Optional unique identifier for the chat element.
#}
{% macro chat_loading(img_src, side='start', id=None) -%}
<div class="chat chat-{{ side }}"
     {% if id %}id="{{ id }}"{% endif %}>
  <div class="chat-image avatar">
    <div class="w-10 rounded-full">
      <img src="{{ img_src }}" alt="{{ side|capitalize }} Avatar" />
    </div>
  </div>
  <div class="chat-bubble bg-base-100/60 flex justify-center items-center">
    <span class="loading loading-dots loading-sm"></span>
  </div>
</div>
{%- endmacro %}
